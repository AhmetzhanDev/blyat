import express from 'express'
import dotenv from 'dotenv'
import mongoose from 'mongoose'
import cors from 'cors'
import { createServer } from 'http'
import { Server, Socket } from 'socket.io'
import authRoutes from './routes/auth'
import whatsappRoutes from './routes/whatsapp'
import integrationsRoutes from './routes/integrations'
import instagramRoutes from './routes/instagram'
import companyRoutes from './routes/company'
import { initAdminClient } from './whatsapp/adminClient'
import morgan from 'morgan'
import jwt from 'jsonwebtoken'
import { TelegramService } from './telegram/telegramClient'
import { initWhatsappClients } from './whatsapp/whatsappClient'
import { CompanySettings } from './models/CompanySettings'
import { initCron } from './whatsapp/closedChats'
import { initDailyReportCron } from './whatsapp/dailyReport'
import { MessageMonitor } from './whatsapp/messageMonitor'
import './checkEnv'
import path from 'path'
import fs from 'fs'

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É .env —Ñ–∞–π–ª–∞
const envPath = path.join(__dirname, '../../.env')
console.log(
	`[${new Date().toISOString()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏: ${envPath}`
)

if (fs.existsSync(envPath)) {
	console.log(`[${new Date().toISOString()}] ‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω`)
	const envContent = fs.readFileSync(envPath, 'utf8')
	console.log(
		`[${new Date().toISOString()}] üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞:`,
		envContent
	)
} else {
	console.error(
		`[${new Date().toISOString()}] ‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${envPath}`
	)
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
console.log(
	`[${new Date().toISOString()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:`
)
console.log(
	`[${new Date().toISOString()}] TELEGRAM_BOT_TOKEN:`,
	process.env.TELEGRAM_BOT_TOKEN
)
console.log(
	`[${new Date().toISOString()}] TELEGRAM_API_ID:`,
	process.env.TELEGRAM_API_ID
)
console.log(
	`[${new Date().toISOString()}] TELEGRAM_API_HASH:`,
	process.env.TELEGRAM_API_HASH
)
console.log(
	`[${new Date().toISOString()}] TELEGRAM_PHONE:`,
	process.env.TELEGRAM_PHONE
)

const app = express()
const httpServer = createServer(app)
const io = new Server(httpServer, {
	path: '/ws',
	cors: {
		origin: ['https://app.salestrack.kz', 'https://app.salestrack.kz'],
		methods: ['GET', 'POST'],
	},
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.use(
	cors({
		origin: ['https://app.salestrack.kz', 'https://app.salestrack.kz'],
		credentials: true,
	})
)

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(morgan('dev'))

app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.use('/api/auth', authRoutes)
app.use('/api/whatsapp', whatsappRoutes)
app.use('/api/integrations', integrationsRoutes)
app.use('/api/company', companyRoutes)
app.use('/api/instagram', instagramRoutes)

interface JWTPayload {
	userId: string
}

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket
io.use((socket, next) => {
	const token = socket.handshake.auth.token

	if (!token) {
		return next(new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'))
	}

	try {
		const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload
		socket.data.user = decoded
		next()
	} catch (error) {
		return next(new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'))
	}
})

// WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
io.on('connection', (socket: Socket) => {
	const userId = socket.data.user?.id

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
	socket.on('disconnect', () => {
		// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	socket.on('error', error => {
		console.error('–û—à–∏–±–∫–∞ WebSocket:', error)
	})
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º io –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { io }

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
	'MONGO_URI',
	'TELEGRAM_BOT_TOKEN',
	'TELEGRAM_API_ID',
	'TELEGRAM_API_HASH',
	'TELEGRAM_PHONE',
]

console.log(`[${new Date().toISOString()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:`)
for (const envVar of requiredEnvVars) {
	const value = process.env[envVar]
	console.log(
		`[${new Date().toISOString()}] ${envVar}: ${
			value ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
		}`
	)
	if (!value) {
		console.error(
			`[${new Date().toISOString()}] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`
		)
		process.exit(1)
	}
}

console.log(
	`[${new Date().toISOString()}] ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
	.connect(process.env.MONGO_URI!, {
		serverSelectionTimeoutMS: 5000, // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
		socketTimeoutMS: 45000, // 45 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∫–µ—Ç–∞
		connectTimeoutMS: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		maxPoolSize: 10, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
		minPoolSize: 5, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
		retryWrites: true, // –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
		retryReads: true, // –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–µ–Ω–∏—è
		w: 'majority', // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º
	})
	.then(() => {
		console.log(`[${new Date().toISOString()}] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB`)
	})
	.catch(err => {
		console.error(
			`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:`,
			err
		)
		process.exit(1)
	})

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π MongoDB
mongoose.connection.on('connecting', () => {
	console.log(`[${new Date().toISOString()}] üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...`)
})

mongoose.connection.on('connected', () => {
	console.log(`[${new Date().toISOString()}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB`)
})

mongoose.connection.on('error', err => {
	console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ MongoDB:`, err)
})

mongoose.connection.on('disconnected', () => {
	console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB`)
})

const PORT = process.env.PORT || 3001
httpServer.listen(PORT, async () => {
	console.log(
		`[${new Date().toISOString()}] üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`
	)
	console.log(
		`[${new Date().toISOString()}] üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://api.salestrack.kz${PORT}/api`
	)

	try {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramService
		const telegramService = TelegramService.getInstance()
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramService...`
		)
		await telegramService.initialize()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		const isConnected = await telegramService.isConnected()
		if (!isConnected) {
			console.log(
				`[${new Date().toISOString()}] ‚ö†Ô∏è TelegramService –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`
			)
			return
		}
		console.log(
			`[${new Date().toISOString()}] ‚úÖ TelegramService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)

		// –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
		if (mongoose.connection.readyState !== 1) {
			console.log(
				`[${new Date().toISOString()}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...`
			)
			await new Promise((resolve, reject) => {
				const timeout = setTimeout(() => {
					reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB'))
				}, 10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

				mongoose.connection.once('connected', () => {
					clearTimeout(timeout)
					resolve(true)
				})

				mongoose.connection.once('error', err => {
					clearTimeout(timeout)
					reject(err)
				})
			})
		}

		console.log(
			`[${new Date().toISOString()}] üìä –°—Ç–∞—Ç—É—Å MongoDB: ${
				mongoose.connection.readyState
			}`
		)

		await CompanySettings.updateMany(
			{},
			{ $set: { isRunning: false } },
			{ new: true }
		)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç WhatsApp
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...`
		)
		await initAdminClient()
		console.log(
			`[${new Date().toISOString()}] ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç WhatsApp –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`
		)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhatsApp –∫–ª–∏–µ–Ω—Ç–æ–≤
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–æ–≤...`
		)
		await initWhatsappClients(io)

		// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MessageMonitor
		console.log(
			`[${new Date().toISOString()}] üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MessageMonitor...`
		)
		const messageMonitor = MessageMonitor.getInstance()
		console.log(
			`[${new Date().toISOString()}] ‚úÖ MessageMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤...`
		)
		initCron(messageMonitor)
		console.log(
			`[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`
		)
		initDailyReportCron(messageMonitor)
		console.log(
			`[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)
	} catch (error) {
		console.error(
			`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:`,
			error
		)
		process.exit(1)
	}
})
