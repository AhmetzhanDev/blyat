import axios from 'axios'

const bot_token = "8120018877:AAHO2lD0yI--wSei68woTGtXo6yaNCcLGZk";
const chat_id = [1080160662, 263582171, 5030626318]
// 1080160662 b1bas
// 263582171 kebila
// 5030626318 serik_shanmanov


export const sendTelegramMessage = async (message: string) => {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É ID –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const sendPromises = chat_id.map(id => 
            axios.post(
                `https://api.telegram.org/bot${bot_token}/sendMessage`,
                {
                    chat_id: id,
                    text: message,
                    parse_mode: 'HTML'
                }
            )
        )

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        const results = await Promise.allSettled(sendPromises)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        const errors = results
            .map((result, index) => {
                if (result.status === 'rejected') {
                    return `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ID ${chat_id[index]}: ${result.reason}`
                }
                return null
            })
            .filter(Boolean)

        if (errors.length > 0) {
            console.error('–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', errors)
            throw new Error(errors.join('\n'))
        }

        return results.map((result, index) => ({
            chat_id: chat_id[index],
            status: result.status,
            data: result.status === 'fulfilled' ? result.value.data : null
        }))
    } catch (error) {
        console.error('Error sending Telegram messages:', error)
        throw error
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const sendRegistrationNotification = async (userData: { 
    email: string, 
    name?: string,
    phone?: string 
}): Promise<void> => {
    const message = `
üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Email: ${userData.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
    `
    await sendTelegramMessage(message)
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
export const sendCompanyCreationNotification = async (companyData: {
    companyName: string,
    userId: string,
    userEmail: string
}): Promise<void> => {
    const message = `
üè¢ <b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è</b>

üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${companyData.companyName}
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${companyData.userEmail}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${companyData.userId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
    `
    await sendTelegramMessage(message)
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
export const sendCompanyDeletionNotification = async (companyData: {
    companyName: string,
    userId: string,
    userEmail: string
}): Promise<void> => {
    const message = `
üóë <b>–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è</b>

üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${companyData.companyName}
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${companyData.userEmail}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${companyData.userId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
    `
    await sendTelegramMessage(message)
}

