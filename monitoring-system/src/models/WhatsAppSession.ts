import { Client, LocalAuth } from 'whatsapp-web.js'
import qrcode from 'qrcode'
import path from 'path'
import { io } from '../server'
import { sendVerificationCode } from '../whatsapp/adminClient'
import { WhatsAppAccountModel } from './WhatsAppAccount'
import { MessageMonitor } from '../whatsapp/messageMonitor'
import { CompanySettings } from '../models/CompanySettings'

const activeClients = new Map<string, Client>()
const sessionCheckIntervals = new Map<string, NodeJS.Timeout>()

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞
let qrStatus: { [userId: string]: 'pending' | 'scanned' | 'ready' | 'error' } =
	{}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const updateSessionStatus = async (userId: string, status: string, message?: string) => {
	try {
		await WhatsAppAccountModel.findOneAndUpdate(
			{ userId },
			{ 
				$set: { 
					sessionStatus: status,
					lastStatusUpdate: new Date(),
					statusMessage: message
				}
			},
			{ upsert: true }
		)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏:', error)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
const checkSessionState = async (userId: string, client: Client) => {
	try {
		const state = await client.getState()
		console.log(`[${new Date().toISOString()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, state)
		
		if (state !== 'CONNECTED') {
			console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
			await updateSessionStatus(userId, 'error', '–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞')
			emitQRStatus(userId, 'error', '–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞')
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
			io.emit(`whatsapp:disconnected:${userId}`, {
				success: false,
				message: '–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',
				timestamp: new Date().toISOString(),
			})
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
			try {
				const companies = await CompanySettings.find({ userId })
				if (companies && companies.length > 0) {
					const messageMonitor = MessageMonitor.getInstance()
					for (const company of companies) {
						if (company.telegramGroupId) {
							const message = `‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ùóÔ∏è\n\n–°–µ—Å—Å–∏—è WhatsApp –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QR-–∫–æ–¥.\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}`
							await messageMonitor.sendTelegramMessage(company._id, message)
						}
					}
				}
			} catch (err) {
				console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:`, err)
			}
		}
	} catch (error) {
		console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏:`, error)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
const startSessionCheck = (userId: string, client: Client) => {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if (sessionCheckIntervals.has(userId)) {
		clearInterval(sessionCheckIntervals.get(userId))
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	const interval = setInterval(() => checkSessionState(userId, client), 30000)
	sessionCheckIntervals.set(userId, interval)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
const stopSessionCheck = (userId: string) => {
	if (sessionCheckIntervals.has(userId)) {
		clearInterval(sessionCheckIntervals.get(userId))
		sessionCheckIntervals.delete(userId)
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export const getOrCreateClient = (userId: string): Client => {
	if (activeClients.has(userId)) {
		return activeClients.get(userId)!
	}

	const client = new Client({
		authStrategy: new LocalAuth({
			clientId: userId,
			dataPath: path.join(process.cwd(), '.wwebjs_auth', `session-${userId}`),
		}),
	})

	client.on('qr', async (qr: string) => {
		try {
			const qrCode = await qrcode.toDataURL(qr)
			qrStatus[userId] = 'pending'
			await updateSessionStatus(userId, 'pending', 'QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
			emitQRStatus(userId, 'pending', 'QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')

			io.emit(`user:qr:${userId}`, { qr: qrCode })
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', err)
			await updateSessionStatus(userId, 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
			emitQRStatus(userId, 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
		}
	})

	client.on('ready', async () => {
		qrStatus[userId] = 'ready'
		await updateSessionStatus(userId, 'ready', 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
		emitQRStatus(userId, 'ready', 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
		
		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–∏
		startSessionCheck(userId, client)

		io.emit(`user:ready:${userId}`, {
			success: true,
			message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
			timestamp: new Date().toISOString(),
		})
	})

	client.on('authenticated', async () => {
		qrStatus[userId] = 'scanned'
		await updateSessionStatus(userId, 'scanned', 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω')
		emitQRStatus(userId, 'scanned', 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω')

		io.emit(`whatsapp:qr_scanned:${userId}`, {
			success: true,
			message: 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω',
			timestamp: new Date().toISOString(),
		})
	})

	client.on('auth_failure', async (msg: string) => {
		console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, msg)
		qrStatus[userId] = 'error'
		await updateSessionStatus(userId, 'error', '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + msg)
		emitQRStatus(userId, 'error', '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + msg)
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–∏
		stopSessionCheck(userId)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram-–≥—Ä—É–ø–ø—É
		try {
			const companies = await CompanySettings.find({ userId })
			if (!companies || companies.length === 0) {
				console.error(`[${new Date().toISOString()}] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
				return
			}

			const messageMonitor = MessageMonitor.getInstance()
			let notificationSent = false

			for (const company of companies) {
				if (company.telegramGroupId) {
					try {
						const errorMessage = `‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ùóÔ∏è\n\n–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp!\n\n–ü—Ä–∏—á–∏–Ω–∞: ${msg}\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ QR-–∫–æ–¥.\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}`
						
						await messageMonitor.sendTelegramMessage(company._id, errorMessage)
						notificationSent = true
						console.log(`[${new Date().toISOString()}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.nameCompany}`)
					} catch (err) {
						console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.nameCompany}:`, err)
					}
				}
			}

			if (!notificationSent) {
				console.error(`[${new Date().toISOString()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–Ω—É Telegram-–≥—Ä—É–ø–ø—É`)
			}
		} catch (err) {
			console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:`, err)
		}
	})

	client.on('disconnected', async (reason: string) => {
		console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, reason)
		
		// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
		activeClients.delete(userId)
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–∏
		stopSessionCheck(userId)
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await updateSessionStatus(userId, 'error', '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ' + reason)
		emitQRStatus(userId, 'error', '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ' + reason)
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
		io.emit(`whatsapp:disconnected:${userId}`, {
			success: false,
			message: '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ' + reason,
			timestamp: new Date().toISOString(),
		})
		
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram-–≥—Ä—É–ø–ø—É
		try {
			const companies = await CompanySettings.find({ userId })
			if (!companies || companies.length === 0) {
				console.error(`[${new Date().toISOString()}] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
				return
			}

			const messageMonitor = MessageMonitor.getInstance()
			let notificationSent = false

			for (const company of companies) {
				if (company.telegramGroupId) {
					try {
						const disconnectMessage = `‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ùóÔ∏è\n\n–°–µ—Å—Å–∏—è WhatsApp –ø–æ—Ç–µ—Ä—è–Ω–∞!\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QR-–∫–æ–¥.\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}`
						
						await messageMonitor.sendTelegramMessage(company._id, disconnectMessage)
						notificationSent = true
						console.log(`[${new Date().toISOString()}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.nameCompany}`)
					} catch (err) {
						console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.nameCompany}:`, err)
					}
				}
			}

			if (!notificationSent) {
				console.error(`[${new Date().toISOString()}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–Ω—É Telegram-–≥—Ä—É–ø–ø—É`)
			}
		} catch (err) {
			console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:`, err)
		}
	})

	activeClients.set(userId, client)
	return client
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
const emitQRStatus = (userId: string, status: string, message?: string) => {
	io.emit(`whatsapp:qr_status:${userId}`, {
		status,
		message: message || `–°—Ç–∞—Ç—É—Å QR-–∫–æ–¥–∞: ${status}`,
		timestamp: new Date().toISOString(),
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const generateUserQR = async (userId: string): Promise<string> => {
	try {
		console.log('–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
		const client = getOrCreateClient(userId)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å QR-–∫–æ–¥–∞
		qrStatus[userId] = 'pending'

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
		emitQRStatus(userId, 'pending', 'QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')

		return new Promise((resolve, reject) => {
			client.on('qr', async (qr: string) => {
				try {
					console.log('–ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥ –≤ generateUserQR:', qr)
					const qrCode = await qrcode.toDataURL(qr)
					console.log('QR-–∫–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ DataURL –≤ generateUserQR')
					resolve(qrCode)
				} catch (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –≤ generateUserQR:', err)
					reject(err)
				}
			})

			client.initialize().catch(err => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err)
				reject(err)
			})
		})
	} catch (error) {
		console.error(
			`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
			error
		)
		throw error
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞
export const getQRStatus = async (userId: string) => {
	try {
		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const account = await WhatsAppAccountModel.findOne({ userId })
		if (account?.sessionStatus) {
			return account.sessionStatus
		}
		// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
		return qrStatus[userId] || 'pending'
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞:', error)
	return qrStatus[userId] || 'pending'
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { generateUserQR, sendVerificationCode }