import { WhatsappChat } from '../models/WhatsappChat'
import { WhatsappMessage } from '../models/WhatsappMessage'
import { CompanySettings } from '../models/CompanySettings'
import { MessageMonitor } from './messageMonitor'
import { CronJob } from 'cron'
import { TelegramService } from '../telegram/telegramClient'

// –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
export const initDailyReportCron = (messageMonitor: MessageMonitor) => {
	console.log(
		`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`
	)

	// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	const testCron = '*/1 * * * *'
	// –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –≤ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
	const realCron = '25 6 * * *'

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
	const job = new CronJob(realCron, async () => {
		console.log(
			`[${new Date().toISOString()}] üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞`
		)
		try {
			const companies = await CompanySettings.find({ isRunning: true })
			console.log(
				`[${new Date().toISOString()}] üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞: ${
					companies.length
				}`
			)

			for (const company of companies) {
				console.log(
					`[${new Date().toISOString()}] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: ${
						company.nameCompany
					}`
				)
				console.log(
					`[${new Date().toISOString()}] üîç Telegram Group ID: ${
						company.telegramGroupId
					}`
				)

				if (!company.telegramGroupId) {
					console.log(
						`[${new Date().toISOString()}] ‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						} –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId`
					)
					continue
				}

				try {
					const report = await messageMonitor.generateDailyReport(company._id)
					await messageMonitor.sendTelegramMessage(company._id, report)
					console.log(
						`[${new Date().toISOString()}] ‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}`
					)
				} catch (error) {
					console.error(
						`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}:`,
						error
					)
				}
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:`,
				error
			)
		}
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ–Ω
	job.start()
	console.log(
		`[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω`
	)
	console.log(
		`[${new Date().toISOString()}] ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å`
	)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
	if (job) {
		console.log(
			`[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)
		console.log(
			`[${new Date().toISOString()}] ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${job
				.nextDate()
				.toLocaleString()}`
		)
	} else {
		console.error(
			`[${new Date().toISOString()}] ‚ùå –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!`
		)
	}
}

const sendDailyReport = async (messageMonitor: MessageMonitor) => {
	console.log(
		`[${new Date().toISOString()}] üìä –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞`
	)

	const companies = await CompanySettings.find({})
	console.log(
		`[${new Date().toISOString()}] üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`
	)

	for (const company of companies) {
		console.log(
			`[${new Date().toISOString()}] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: ${
				company.nameCompany
			}`
		)

		if (!company.telegramGroupId) {
			console.log(
				`[${new Date().toISOString()}] ‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				} –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`
			)
			continue
		}

		console.log(
			`[${new Date().toISOString()}] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: ${
				company.nameCompany
			}`
		)

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
		const today = new Date()
		today.setHours(0, 0, 0, 0)

		const chats = await WhatsappChat.find({
			companyId: company._id,
			createdAt: { $gte: today },
		})

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
		const messages = await WhatsappMessage.find({
			whatsappChatId: { $in: chats.map(chat => chat._id) },
			createdAt: { $gte: today },
		})

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		const startedChats = chats.length
		const closedChats = chats.filter(chat => chat.isClosed).length

		// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
		const responseTimes: number[] = []
		for (const chat of chats) {
			const chatMessages = messages.filter(m =>
				m.whatsappChatId.equals(chat._id)
			)
			for (let i = 0; i < chatMessages.length - 1; i++) {
				if (!chatMessages[i].isEcho && chatMessages[i + 1].isEcho) {
					const responseTime =
						chatMessages[i + 1].createdAt.getTime() -
						chatMessages[i].createdAt.getTime()
					responseTimes.push(responseTime)
				}
			}
		}

		const avgResponseTime =
			responseTimes.length > 0
				? Math.round(
						responseTimes.reduce((a, b) => a + b, 0) /
							responseTimes.length /
							1000
				  )
				: 0

		// –î–∏–∞–ª–æ–≥–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
		const unansweredChats = chats.filter(chat => {
			const chatMessages = messages.filter(m =>
				m.whatsappChatId.equals(chat._id)
			)
			return chatMessages.length > 0 && !chatMessages.some(m => m.isEcho)
		}).length

		// –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
		const overdueResponses = responseTimes.filter(
			time => time > 2 * 60 * 1000
		).length

		// –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —á–∞—Ç—ã (sendMessage: false)
		const unviewedChats = chats.filter(chat => !chat.sendMessage)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		const message = `üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç SalesTrack</b>\n\nüóì <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleDateString()}\n\nüè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${
			company.nameCompany
		}\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n‚úçÔ∏è <b>–î–∏–∞–ª–æ–≥–æ–≤ –Ω–∞—á–∞—Ç–æ:</b> ${startedChats}\n‚úÖ <b>–î–∏–∞–ª–æ–≥–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ:</b> ${closedChats}\n‚ö°Ô∏è<b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> ${Math.floor(
			avgResponseTime / 60
		)} –º–∏–Ω. ${
			avgResponseTime % 60
		} —Å–µ–∫.\n‚ö†Ô∏è <b>–î–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞:</b> ${unansweredChats}\nüïì <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª—å—à–µ 2 –º–∏–Ω):</b> ${overdueResponses}\n\nüìå <b>–°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n${unviewedChats
			.map(chat => `https://wa.me/${chat.chatId}`)
			.join('\n')}`

		try {
			console.log(
				`[${new Date().toISOString()}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}`
			)
			await messageMonitor.sendTelegramMessage(company._id, message)
			console.log(
				`[${new Date().toISOString()}] ‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}`
			)
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}:`,
				error
			)
			if (error instanceof Error) {
				console.error(
					`[${new Date().toISOString()}] ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`,
					error.message
				)
			}
		}
	}
}
