//
import { Client, Message } from 'whatsapp-web.js';
import { UserModel } from '../models/User';
import { CompanySettings } from '../models/CompanySettings';
import { TelegramService } from '../telegram/telegramClient';

export class MessageMonitor {
  private static instance: MessageMonitor;
  private activeTimers: Map<string, NodeJS.Timeout>;
  private telegramService: TelegramService;

  private constructor() {
    this.activeTimers = new Map();
    this.telegramService = TelegramService.getInstance();
  }

  public static getInstance(): MessageMonitor {
    if (!MessageMonitor.instance) {
      MessageMonitor.instance = new MessageMonitor();
    }
    return MessageMonitor.instance;
  }

  public async handleMessage(message: Message): Promise<void> {
    try {
      const timestamp = new Date().toISOString();
      console.log(`[${timestamp}] üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${message.from}`);
      console.log(`[${timestamp}] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${message.body}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (message.fromMe) {
        console.log(`[${timestamp}] üë§ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const cleanPhoneNumber = message.from.replace('@c.us', '').replace('+', '').replace(/\D/g, '');
      console.log(`[${timestamp}] üîç –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ: ${cleanPhoneNumber}`);
      
      const user = await UserModel.findOne({ 
        phoneNumber: cleanPhoneNumber
      });

      if (user) {
        console.log(`[${timestamp}] ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, user);
        
        const companySettings = await CompanySettings.findOne({ userId: user._id });
        if (companySettings && companySettings.companies.length > 0) {
          const company = companySettings.companies[0];
          console.log(`[${timestamp}] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è:`, company);

          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
          if (this.activeTimers.has(message.from)) {
            console.log(`[${timestamp}] üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${message.from}`);
            clearTimeout(this.activeTimers.get(message.from));
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
          const timer = setTimeout(async () => {
            const currentTimestamp = new Date().toISOString();
            console.log(`[${currentTimestamp}] ‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è ${message.from}`);
            
            if (company.telegramGroupId) {
              try {
                const reminderMessage = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è\n\n–í WhatsApp-—á–∞—Ç–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${company.managerResponse} –º–∏–Ω—É—Ç!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: https://wa.me/${cleanPhoneNumber}`;
                
                if (!this.telegramService) {
                  throw new Error('Telegram —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
                
                const isConnected = await this.telegramService.isConnected();
                if (!isConnected) {
                  await this.telegramService.initialize();
                }
                
                await this.telegramService.sendMessage(`-${company.telegramGroupId}`, reminderMessage);
                console.log(`[${currentTimestamp}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
              } catch (error) {
                console.error(`[${currentTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error);
              }
            }
          }, company.managerResponse * 60 * 1000);

          this.activeTimers.set(message.from, timer);
          console.log(`[${timestamp}] ‚è≥ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ ${company.managerResponse} –º–∏–Ω—É—Ç –¥–ª—è ${message.from}`);
        }
      }
    } catch (error) {
      console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
    }
  }

  public async handleOutgoingMessage(message: Message): Promise<void> {
    try {
      const timestamp = new Date().toISOString();
      console.log(`[${timestamp}] üì§ –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:`);
      console.log(`[${timestamp}] üìù –¢–µ–∫—Å—Ç: "${message.body}"`);
      console.log(`[${timestamp}] üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${message.to}`);

      // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
      if (this.activeTimers.has(message.to)) {
        console.log(`[${timestamp}] üõë –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${message.to}`);
        clearTimeout(this.activeTimers.get(message.to));
        this.activeTimers.delete(message.to);
        console.log(`[${timestamp}] ‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`);
      }
    } catch (error) {
      console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
    }
  }
} 