import { Client, LocalAuth } from 'whatsapp-web.js'
import path from 'path'
import fs from 'fs'
import os from 'os'
import { io } from '../server'
import { sendVerificationCode } from './adminClient'
import qrcode from 'qrcode'
import { Socket } from 'socket.io'
import { UserModel } from '../models/User'
import { MessageMonitor } from './messageMonitor'
import { CompanySettings } from '../models/CompanySettings'
import { Types } from 'mongoose'
import { initCron } from './closedChats'
import { initDailyReportCron } from './dailyReport'

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ QR-–∫–æ–¥–æ–≤
const qrTimers = new Map<string, NodeJS.Timeout>()

const messageMonitor = MessageMonitor.getInstance()

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const sessionsDir = path.join(os.homedir(), '.whatsapp-sessions')
fs.mkdirSync(sessionsDir, { recursive: true })
console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π:', sessionsDir)

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è .wwebjs_auth
// const wwebjsDir = path.join(process.cwd(), '.wwebjs_auth');
// fs.mkdirSync(wwebjsDir, { recursive: true });
// console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .wwebjs_auth:', wwebjsDir);

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const clearLockFiles = () => {
	const sessionDir = path.join(process.cwd(), '.wwebjs_auth')
	if (fs.existsSync(sessionDir)) {
		try {
			// –£–¥–∞–ª—è–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–µ—Å—Å–∏—è–º–∏
			fs.rmSync(sessionDir, { recursive: true, force: true })
			console.log('–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å–µ—Å—Å–∏—è–º–∏:', sessionDir)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏:', error)
		}
	}
}

initCron(messageMonitor)
initDailyReportCron(messageMonitor)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞
export let qrStatus: {
	[userId: string]: 'pending' | 'scanned' | 'ready' | 'error'
} = {}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export const getOrCreateClient = (companyId: string): Client => {
	console.log(
		`[${new Date().toISOString()}] üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
	)
	const client = new Client({
		authStrategy: new LocalAuth({
			clientId: `company-${companyId}`,
		}),
		puppeteer: {
			args: [
				'--no-sandbox',
				'--disable-setuid-sandbox',
				'--disable-dev-shm-usage',
				'--disable-accelerated-2d-canvas',
				'--no-first-run',
				'--no-zygote',
				'--disable-gpu',
				'--disable-extensions',
				'--disable-software-rasterizer',
				'--disable-features=site-per-process',
				'--disable-features=IsolateOrigins',
				'--disable-site-isolation-trials',
			],
		},
	})

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
	const addMessageHandlers = () => {
		console.log(
			`[${new Date().toISOString()}] üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
		)

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
		client.removeAllListeners('message')
		client.removeAllListeners('message_create')

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
		client.on('message', async message => {
			console.log(`[${new Date().toISOString()}] üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, {
				from: message.from,
				to: message.to,
				body: message.body,
				fromMe: message.fromMe,
				type: message.type,
				isForwarded: message.isForwarded,
				isStatus: message.isStatus,
				hasMedia: message.hasMedia,
				timestamp: message.timestamp,
			})
			try {
				await messageMonitor.handleMessage(message)
			} catch (error) {
				console.error(
					`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
					error
				)
			}
		})

		client.on('message_create', async message => {
			console.log(`[${new Date().toISOString()}] üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, {
				from: message.from,
				to: message.to,
				body: message.body,
				fromMe: message.fromMe,
				type: message.type,
				isForwarded: message.isForwarded,
				isStatus: message.isStatus,
				hasMedia: message.hasMedia,
				timestamp: message.timestamp,
			})

			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				if (
					message.fromMe ||
					message.isForwarded ||
					message.isStatus ||
					message.to
				) {
					console.log(
						`[${new Date().toISOString()}] üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`
					)
					await messageMonitor.handleOutgoingMessage(message)
				}
			} catch (error) {
				console.error(
					`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
					error
				)
			}
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
	addMessageHandlers()

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	client.on('disconnected', () => {
		console.log(
			`[${new Date().toISOString()}] ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`
		)
	})

	client.on('authenticated', () => {
		console.log(`[${new Date().toISOString()}] ‚úÖ –ö–ª–∏–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`)
		addMessageHandlers() // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	})

	client.on('ready', () => {
		console.log(`[${new Date().toISOString()}] ‚úÖ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`)
		console.log(`[${new Date().toISOString()}] üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:`, {
			wid: client.info?.wid,
			platform: client.info?.platform,
			pushname: client.info?.pushname,
		})
		addMessageHandlers() // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	client.on('auth_failure', error => {
		console.error(
			`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:`,
			error
		)
	})

	client.on('change_state', state => {
		console.log(
			`[${new Date().toISOString()}] üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:`,
			state
		)
	})

	return client
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { sendVerificationCode }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
const emitQRStatus = (
	userId: string,
	status: string,
	message?: string,
	io?: any
) => {
	if (!io) {
		console.error('[QR-DEBUG] WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ emitQRStatus')
		return
	}

	try {
		console.log('[QR-DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket:', {
			userId,
			status,
			message,
			timestamp: new Date().toISOString(),
		})

		io.emit(`whatsapp:qr_status:${userId}`, {
			status,
			message,
		})
	} catch (error) {
		console.error(
			'[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket:',
			error
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è socketId –ø–æ userId
const getSocketIdByUserId = (io: any, userId: string): string | null => {
	const sockets = io.sockets.sockets
	for (const [socketId, socket] of sockets) {
		if (socket.data.user?.id === userId) {
			return socketId
		}
	}
	return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const generateUserQR = async (
	userId: string,
	io: any,
	companyId: string
): Promise<{ client: Client | undefined; qr: string }> => {
	return new Promise(async (resolve, reject) => {
		const settings = await CompanySettings.findOne({
			userId,
			_id: new Types.ObjectId(companyId),
			whatsappAuthorized: true,
			isRunning: true,
		})

		if (settings) {
			io.emit(`user:${userId}:ready`, {
				status: 'ready',
				message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
				timestamp: new Date().toISOString(),
				whatsappAuthorized: true,
				companyId,
			})
			return
		}

		try {
			console.log('[QR-DEBUG] –ù–∞—á–∞–ª–æ generateUserQR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

			if (!io) {
				throw new Error('WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
			}

			const client = getOrCreateClient(companyId)

			// Clear any existing QR timer for this user
			if (qrTimers.has(userId)) {
				clearTimeout(qrTimers.get(userId))
				qrTimers.delete(userId)
			}

			// Set a longer timeout (5 minutes instead of default)
			const qrTimeout = setTimeout(() => {
				console.log('[QR-DEBUG] QR –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...')
				client.destroy().then(() => {
					emitQRStatus(
						userId,
						'error',
						'QR –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞.',
						io
					)
				})
			}, 300000) // 5 minutes in milliseconds

			qrTimers.set(userId, qrTimeout)

			await CompanySettings.findOneAndUpdate(
				{
					userId,
					_id: new Types.ObjectId(companyId),
				},
				{ isRunning: true },
				{ new: true }
			)

			qrStatus[userId] = 'pending'
			emitQRStatus(
				userId,
				'pending',
				'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞. –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 20-30 —Å–µ–∫—É–Ω–¥.',
				io
			)

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'qr' –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
			const qrHandler = async (qr: string) => {
				console.log('[QR-DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ QR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
				try {
					console.log('[QR-DEBUG] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64')

					await CompanySettings.findOneAndUpdate(
						{
							userId,
							_id: new Types.ObjectId(companyId),
							phoneNumber: null,
						},
						{ whatsappAuthorized: false },
						{ new: true }
					)
						.then(() => {
							console.log(
								`[QR-DEBUG] –°—Ç–∞—Ç—É—Å WhatsApp –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ pending –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
							)
						})
						.catch((error: Error) => {
							console.error(
								`[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ WhatsApp:`,
								error
							)
						})

					// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å—Ä–∞–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ data:image/png;base64
					const qrCode = await qrcode.toDataURL(qr, {
						type: 'image/png',
						margin: 1,
						width: 300, // Increased size for better scanning
						color: {
							dark: '#000000',
							light: '#ffffff',
						},
					})

					console.log('[QR-DEBUG] QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', qrCode.length)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —á–µ—Ä–µ–∑ WebSocket —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
					try {
						console.log('[QR-DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ WebSocket')
						io.emit(`user:qr:${userId}`, {
							qr: qrCode,
							message:
								'–ù–æ–≤—ã–π QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –£ –≤–∞—Å –µ—Å—Ç—å 20-30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.',
							timestamp: new Date().toISOString(),
						})
						console.log('[QR-DEBUG] QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket')
					} catch (error) {
						console.error(
							'[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ WebSocket:',
							error
						)
						throw error
					}

					return { client, qr: qrCode }
				} catch (err) {
					console.error('[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', err)
					throw err
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'qr'
			client.on('qr', qrHandler)

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
			client.on('authenticated', () => {
				console.log(
					'[QR-DEBUG] –ö–ª–∏–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
					userId
				)
				qrStatus[userId] = 'scanned'
				emitQRStatus(userId, 'scanned', 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω', io)

				// –ü–æ–ª—É—á–∞–µ–º socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const socketId = getSocketIdByUserId(io, userId)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				// if (socketId) {
				io.emit(`user:${userId}:scanned`, {
					status: 'scanned',
					message: 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω',
					timestamp: new Date().toISOString(),
				})
				// } else {
				//   console.error('[QR-DEBUG] –ù–µ –Ω–∞–π–¥–µ–Ω socketId –¥–ª—è userId:', userId);
				// }
			})

			client.on('ready', async () => {
				console.log('[QR-DEBUG] –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
				qrStatus[userId] = 'ready'
				emitQRStatus(userId, 'ready', 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', io)

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
				await CompanySettings.findOneAndUpdate(
					{
						userId,
						_id: new Types.ObjectId(companyId),
						// phoneNumber: null
					},
					{
						whatsappAuthorized: true,
						phoneNumber: client.info.wid._serialized
							.replace('@c.us', '')
							.replace('+', '')
							.replace(/\D/g, ''),
					},
					{ new: true }
				)
					.then(() => {
						console.log(
							`[QR-DEBUG] –°—Ç–∞—Ç—É—Å WhatsApp –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ active –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
						)
					})
					.catch((error: Error) => {
						console.error(
							`[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ WhatsApp:`,
							error
						)
					})

				// –ü–æ–ª—É—á–∞–µ–º socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				// const socketId = getSocketIdByUserId(io, userId);

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				// if (socketId) {
				io.emit(`user:${userId}:ready`, {
					status: 'ready',
					message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
					timestamp: new Date().toISOString(),
					whatsappAuthorized: true,
					companyId,
					phoneNumber: client.info.wid._serialized
						.replace('@c.us', '')
						.replace('+', '')
						.replace(/\D/g, ''),
				})
				// } else {
				//   console.error('[QR-DEBUG] –ù–µ –Ω–∞–π–¥–µ–Ω socketId –¥–ª—è userId:', userId);
				// }
				resolve({ client, qr: '' })
			})

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
			console.log('[QR-DEBUG] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞')
			client.initialize().catch(err => {
				console.error('[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err)
				reject(err)
			})

			return { client, qr: '' }
		} catch (error) {
			console.error('[QR-DEBUG] –û—à–∏–±–∫–∞ –≤ generateUserQR:', error)
			reject(error)
		}
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
export const handleQRScanned = async (
	userId: string,
	io: any
): Promise<void> => {
	try {
		console.log(
			`[${new Date().toISOString()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
		)

		if (!io) {
			throw new Error('WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
		qrStatus[userId] = 'scanned'
		emitQRStatus(userId, 'scanned', 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω', io)

		// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
		if (qrTimers.has(userId)) {
			clearTimeout(qrTimers.get(userId))
			qrTimers.delete(userId)
		}
	} catch (error) {
		console.error(
			`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:`,
			error
		)
		emitQRStatus(
			userId,
			'error',
			'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞',
			io
		)
	}
}

export const initWhatsappClients = async (io: any) => {
	try {
		const companies = await CompanySettings.find({ whatsappAuthorized: true })

		for (const company of companies) {
			console.log(company.userId?.toString())
			await generateUserQR(
				company.userId?.toString(),
				io,
				company._id.toString()
			)
		}
	} catch (error) {
		console.error(
			`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞:`,
			error
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞
export const initWhatsAppClient = (io: any) => {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	io.on('connection', (socket: Socket) => {
		console.log(
			`[${new Date().toISOString()}] –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:`,
			socket.id
		)

		socket.on('user:qr_scanned', (data: { userId: string }) => {
			const { userId } = data
			console.log(
				`[${new Date().toISOString()}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
			)
			handleQRScanned(userId, io)
		})

		socket.on('disconnect', () => {
			console.log(
				`[${new Date().toISOString()}] WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:`,
				socket.id
			)
		})
	})
}
