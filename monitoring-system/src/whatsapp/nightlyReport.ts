import { MessageMonitor } from './messageMonitor'
import { CompanySettings } from '../models/CompanySettings'
import { WhatsappChat } from '../models/WhatsappChat'
import { WhatsappMessage } from '../models/WhatsappMessage'
import { Types } from 'mongoose'
import { format, subDays, addHours, isWithinInterval, parseISO } from 'date-fns'
import { toZonedTime } from 'date-fns-tz'
import { CronJob } from 'cron'
import { TelegramService } from '../telegram/telegramClient'

interface IReportStats {
	totalChats: number
	respondedChats: number
	unansweredChats: number
	avgResponseTime: number
}

export class NightlyReportManager {
	private static instance: NightlyReportManager
	private activeJobs: Map<string, CronJob>
	private messageMonitor: MessageMonitor | null

	private constructor() {
		this.activeJobs = new Map()
		this.messageMonitor = null
	}

	public static getInstance(): NightlyReportManager {
		if (!NightlyReportManager.instance) {
			NightlyReportManager.instance = new NightlyReportManager()
		}
		return NightlyReportManager.instance
	}

	public setMessageMonitor(monitor: MessageMonitor) {
		this.messageMonitor = monitor
	}

	public async createCompanyCron(company: any) {
		try {
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—Ä–æ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
			const existingJob = this.activeJobs.get(company._id.toString())
			if (existingJob) {
				console.log(
					`[${new Date().toISOString()}] üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
						company.nameCompany
					}`
				)
				existingJob.stop()
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC
			const [workStartHours, workStartMinutes] = company
				.working_hours_start!.split(':')
				.map(Number)
			const [workEndHours, workEndMinutes] = company
				.working_hours_end!.split(':')
				.map(Number)

			console.log(`[${new Date().toISOString()}] ‚è∞ –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:`, {
				start: `${workStartHours}:${workStartMinutes}`,
				end: `${workEndHours}:${workEndMinutes}`,
			})

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC (Almaty UTC+6)
			// –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ UTC+6 –≤ UTC –ø—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Ç–∞–µ–º 6 —á–∞—Å–æ–≤
			const workStartUTC = workStartHours - 6
			const workEndUTC = workEndHours - 6

			console.log(`[${new Date().toISOString()}] ‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC:`, {
				start: `${workStartUTC}:${workStartMinutes}`,
				end: `${workEndUTC}:${workEndMinutes}`,
			})

			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
			const now = new Date()
			const currentHour = now.getUTCHours()
			const currentMinute = now.getUTCMinutes()
			const currentTimeInMinutes = currentHour * 60 + currentMinute

			// –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ (–≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è)
			const reportHour = workStartUTC
			const reportMinute = workStartMinutes
			const reportTimeInMinutes = reportHour * 60 + reportMinute

			console.log(`[${new Date().toISOString()}] ‚è∞ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:`, {
				currentTime: `${currentHour}:${currentMinute} UTC`,
				reportTime: `${reportHour}:${reportMinute} UTC`,
				currentTimeInMinutes,
				reportTimeInMinutes,
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å
			// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞
			const timeDiff = Math.abs(reportTimeInMinutes - currentTimeInMinutes)
			const shouldRunNow = timeDiff <= 2

			console.log(
				`[${new Date().toISOString()}] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}:`,
				{
					currentTime: `${currentHour}:${currentMinute} UTC`,
					reportTime: `${reportHour}:${reportMinute} UTC`,
					timeDiff,
					shouldRunNow,
				}
			)

			// –°–æ–∑–¥–∞–µ–º –∫—Ä–æ–Ω –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ UTC
			const cronExpression = `${reportMinute} ${reportHour} * * *`

			const job = new CronJob(
				cronExpression,
				async () => {
					console.log(
						`[${new Date().toISOString()}] üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}`
					)
					try {
						if (!this.messageMonitor) {
							throw new Error('MessageMonitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
						}

						// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ UTC
						const now = new Date()

						// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC
						const [workStartHours, workStartMinutes] = company
							.working_hours_start!.split(':')
							.map(Number)
						const [workEndHours, workEndMinutes] = company
							.working_hours_end!.split(':')
							.map(Number)

						// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC (Almaty UTC+6)
						const workStartUTC = workStartHours - 5
						const workEndUTC = workEndHours - 5

						// –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
						const reportEnd = new Date(now)
						reportEnd.setUTCHours(workStartUTC, workStartMinutes, 0, 0)

						const reportStart = new Date(reportEnd)
						reportStart.setUTCDate(reportEnd.getUTCDate() - 1)
						reportStart.setUTCHours(workEndUTC, workEndMinutes, 0, 0)

						console.log(
							`[${new Date().toISOString()}] üìä –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
								company.nameCompany
							}:`,
							{
								start: reportStart.toISOString(),
								end: reportEnd.toISOString(),
								startLocal: reportStart.toLocaleString('ru-RU', {
									timeZone: 'Asia/Almaty',
								}),
								endLocal: reportEnd.toLocaleString('ru-RU', {
									timeZone: 'Asia/Almaty',
								}),
							}
						)

						// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
						const chats = await WhatsappChat.find({
							companyId: company._id,
							createdAt: {
								$gte: reportStart,
								$lte: reportEnd,
							},
						})

						console.log(
							`[${new Date().toISOString()}] üìä –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: ${chats.length}`
						)

						// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
						const messages = await WhatsappMessage.find({
							companyId: company._id,
							createdAt: {
								$gte: reportStart,
								$lte: reportEnd,
							},
						})

						console.log(
							`[${new Date().toISOString()}] üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${
								messages.length
							}`
						)

						// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
						const report = {
							companyName: company.nameCompany,
							period: {
								start: reportStart.toISOString(),
								end: reportEnd.toISOString(),
							},
							stats: {
								totalChats: chats.length,
								totalMessages: messages.length,
							},
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
						if (company.telegramGroupId) {
							const telegramService = TelegramService.getInstance()
							await telegramService.initialize()

							const reportMessage = `
üìä *–ù–æ—á–Ω–æ–π –æ—Ç—á–µ—Ç*
–ö–æ–º–ø–∞–Ω–∏—è: ${report.companyName}
–ü–µ—Ä–∏–æ–¥: ${reportStart.toLocaleString('ru-RU', {
								timeZone: 'Asia/Almaty',
							})} - ${reportEnd.toLocaleString('ru-RU', {
								timeZone: 'Asia/Almaty',
							})}
–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${report.stats.totalChats}
–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${report.stats.totalMessages}
`

							await telegramService.sendMessage(
								company.telegramGroupId,
								reportMessage
							)
							console.log(
								`[${new Date().toISOString()}] ‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
									company.nameCompany
								}`
							)
						} else {
							console.log(
								`[${new Date().toISOString()}] ‚ö†Ô∏è Telegram –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
									company.nameCompany
								}`
							)
						}
					} catch (error) {
						console.error(
							`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
								company.nameCompany
							}:`,
							error
						)
					}
				},
				null,
				true,
				'UTC'
			)

			// –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ–Ω
			job.start()

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–æ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
			this.activeJobs.set(company._id.toString(), job)

			console.log(
				`[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}`,
				{
					cronExpression,
					nextRun: job.nextDate().toString(),
					shouldRunNow,
					currentTime: `${currentHour}:${currentMinute} UTC`,
					reportTime: `${reportHour}:${reportMinute} UTC`,
					timeDiff,
				}
			)

			// –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–∑—É
			if (shouldRunNow) {
				console.log(
					`[${new Date().toISOString()}] üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
						company.nameCompany
					}`
				)
				job.fireOnTick()
			}

			return job
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}:`,
				error
			)
			return null
		}
	}

	public async updateCompanyCron(company: any) {
		console.log(
			`[${new Date().toISOString()}] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
				company.nameCompany
			}`
		)
		return this.createCompanyCron(company)
	}

	public async initCrons() {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏
			const companies = await CompanySettings.find({
				whatsappAuthorized: true,
				phoneNumber: { $exists: true, $ne: null },
				nameCompany: { $exists: true, $ne: null },
				working_hours_start: { $exists: true, $ne: null },
				working_hours_end: { $exists: true, $ne: null },
			})

			if (companies.length === 0) {
				console.log(
					`[${new Date().toISOString()}] ‚ÑπÔ∏è –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏, –Ω–æ—á–Ω–æ–π –æ—Ç—á–µ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`
				)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∫—Ä–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
			for (const company of companies) {
				const job = await this.createCompanyCron(company)
				if (!job) {
					console.log(
						`[${new Date().toISOString()}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–æ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}`
					)
				}
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–Ω–æ–≤:`,
				error
			)
		}
	}

	public stop() {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ–Ω—ã
		for (const [companyId, job] of this.activeJobs.entries()) {
			console.log(
				`[${new Date().toISOString()}] üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
			)
			job.stop()
		}
		this.activeJobs.clear()
	}
}

export const initNightlyReportCron = (
	messageMonitor: MessageMonitor | null
) => {
	console.log(
		`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`
	)

	const manager = NightlyReportManager.getInstance()
	if (messageMonitor) {
		manager.setMessageMonitor(messageMonitor)
	}
	manager.initCrons()

	return {
		stop: () => manager.stop(),
		updateCompanyCron: (company: any) => manager.updateCompanyCron(company),
	}
}
