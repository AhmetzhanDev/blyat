import { MessageMonitor } from './messageMonitor'
import { CompanySettings } from '../models/CompanySettings'
import { WhatsappChat } from '../models/WhatsappChat'
import { WhatsappMessage } from '../models/WhatsappMessage'
import { Types } from 'mongoose'
import { format, subDays, addHours, isWithinInterval, parseISO } from 'date-fns'
import { toZonedTime } from 'date-fns-tz'
import { CronJob } from 'cron'
import { TelegramService } from '../telegram/telegramClient'

interface IReportStats {
	totalChats: number
	respondedChats: number
	unansweredChats: number
	avgResponseTime: number
}

export const initNightlyReportCron = (messageMonitor: MessageMonitor) => {
	console.log(
		`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`
	)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
	const createCompanyCron = async (company: any) => {
		try {
			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC
			const [workStartHours, workStartMinutes] = company
				.working_hours_start!.split(':')
				.map(Number)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
			if (isNaN(workStartHours) || isNaN(workStartMinutes)) {
				console.log(
					`[${new Date().toISOString()}] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
						company.nameCompany
					}`
				)
				return null
			}

			// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–∑–∞ 5 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è)
			const reportHours = workStartHours - 5
			const reportMinutes = workStartMinutes

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è cron (–¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
			const formattedHours = reportHours.toString().padStart(2, '0')
			const formattedMinutes = reportMinutes.toString().padStart(2, '0')

			// –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
			const cronExpression = `${formattedMinutes} ${formattedHours} * * *`

			console.log(
				`[${new Date().toISOString()}] ‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}:`,
				{
					workStartLocal: company.working_hours_start,
					reportTime: `${formattedHours}:${formattedMinutes}`,
					cronExpression,
				}
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å
			const now = new Date()
			const almatyTime = toZonedTime(now, 'Asia/Almaty')

			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
			const [currentHours, currentMinutes] = [
				now.getUTCHours(),
				now.getUTCMinutes(),
			]

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
			const currentTimeInMinutes = currentHours * 60 + currentMinutes
			const reportTimeInMinutes = reportHours * 60 + reportMinutes

			// –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞, –∑–Ω–∞—á–∏—Ç –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≤—Ç—Ä–∞
			const shouldRunNow = currentTimeInMinutes < reportTimeInMinutes

			console.log(`[${new Date().toISOString()}] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:`, {
				currentTimeUTC: `${currentHours}:${currentMinutes}`,
				reportTimeUTC: `${reportHours}:${reportMinutes}`,
				currentTimeInMinutes,
				reportTimeInMinutes,
				shouldRunNow,
				almatyTime: format(almatyTime, 'HH:mm'),
			})

			const job = new CronJob(
				cronExpression,
				async () => {
					console.log(
						`[${new Date().toISOString()}] üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}`
					)
					console.log(
						`[${new Date().toISOString()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏:`,
						{
							id: company._id,
							name: company.nameCompany,
							phoneNumber: company.phoneNumber,
							telegramGroupId: company.telegramGroupId,
							working_hours_start: company.working_hours_start,
							working_hours_end: company.working_hours_end,
						}
					)

					try {
						// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC
						const [workStartHours, workStartMinutes] = company
							.working_hours_start!.split(':')
							.map(Number)
						const [workEndHours, workEndMinutes] = company
							.working_hours_end!.split(':')
							.map(Number)

						console.log(`[${new Date().toISOString()}] ‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:`, {
							workStartHours,
							workStartMinutes,
							workEndHours,
							workEndMinutes,
						})

						// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
						const now = new Date()
						const almatyTime = toZonedTime(now, 'Asia/Almaty')

						// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ UTC (–≤—ã—á–∏—Ç–∞–µ–º 5 —á–∞—Å–æ–≤ –¥–ª—è –ê–ª–º–∞—Ç—ã)
						const workStartUTC = workStartHours - 5
						const workEndUTC = workEndHours - 5

						console.log(`[${new Date().toISOString()}] ‚è∞ UTC –≤—Ä–µ–º—è:`, {
							workStartUTC,
							workEndUTC,
							currentTime: now.toISOString(),
							almatyTime: almatyTime.toISOString(),
						})

						// –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ - –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
						const reportEnd = new Date(almatyTime)
						reportEnd.setHours(workStartUTC, workStartMinutes, 0, 0)

						// –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ - –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
						const reportStart = new Date(reportEnd)
						reportStart.setDate(reportStart.getDate() - 1) // –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
						reportStart.setHours(workEndUTC, workEndMinutes, 0, 0)

						console.log(
							`[${new Date().toISOString()}] üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
								company._id
							}:`,
							{
								start: reportStart.toISOString(),
								end: reportEnd.toISOString(),
								workStartLocal: company.working_hours_start,
								workEndLocal: company.working_hours_end,
								workStartUTC: `${workStartUTC}:${workStartMinutes}`,
								workEndUTC: `${workEndUTC}:${workEndMinutes}`,
								almatyTime: format(almatyTime, 'yyyy-MM-dd HH:mm:ss'),
							}
						)

						// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
						const chats = await WhatsappChat.find({
							companyId: new Types.ObjectId(company._id),
							createdAt: {
								$gte: reportStart,
								$lt: reportEnd,
							},
						}).lean()

						console.log(
							`[${new Date().toISOString()}] üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${
								chats.length
							}`
						)

						// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
						const stats: IReportStats = {
							totalChats: chats.length,
							respondedChats: chats.filter(chat => chat.sendMessage === true)
								.length,
							unansweredChats: 0,
							avgResponseTime: 0,
						}
						stats.unansweredChats = chats.filter(
							chat => chat.sendMessage === false
						).length

						// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
						const messages = await WhatsappMessage.find({
							whatsappChatId: { $in: chats.map(chat => chat._id) },
							createdAt: {
								$gte: reportStart,
								$lt: reportEnd,
							},
						}).lean()

						// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
						const responseTimes: number[] = []
						for (const chat of chats) {
							const chatMessages = messages.filter(m =>
								m.whatsappChatId.equals(chat._id)
							)
							for (let i = 0; i < chatMessages.length - 1; i++) {
								if (!chatMessages[i].isEcho && chatMessages[i + 1].isEcho) {
									const responseTime =
										chatMessages[i + 1].createdAt.getTime() -
										chatMessages[i].createdAt.getTime()
									responseTimes.push(responseTime)
								}
							}
						}

						stats.avgResponseTime =
							responseTimes.length > 0
								? Math.round(
										responseTimes.reduce((a, b) => a + b, 0) /
											responseTimes.length /
											1000
								  )
								: 0

						// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
						const unviewedChats = chats.filter(
							chat => chat.sendMessage === false
						)

						// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
						let reportMessage = `üåô <b>–ù–æ—á–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç SalesTrack</b>\n\n
						üóì <b>–ü–µ—Ä–∏–æ–¥:</b> —Å ${format(reportStart, 'HH:mm')} –¥–æ ${format(
							reportEnd,
							'HH:mm'
						)} (–ê–ª–º–∞—Ç—ã)\n
						üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company.nameCompany}\n\n
						<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n\n
						‚úçÔ∏è <b>–ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤:</b> ${stats.totalChats}\n
						‚úÖ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:</b> ${stats.respondedChats}\n
						‚ö†Ô∏è <b>–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞:</b> ${stats.unansweredChats}\n
						‚ö°Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> ${Math.floor(
							stats.avgResponseTime / 60
						)} –º–∏–Ω. ${stats.avgResponseTime % 60} —Å–µ–∫.`

						// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
						if (unviewedChats.length > 0) {
							const links = unviewedChats
								.map(chat => `https://wa.me/${chat.chatId}`)
								.join('\n')

							reportMessage += `\n\nüìå <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n${links}`
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
						if (company.telegramGroupId) {
							try {
								console.log(
									`[${new Date().toISOString()}] üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:`,
									{
										companyId: company._id,
										companyName: company.nameCompany,
										telegramGroupId: company.telegramGroupId,
										messageLength: reportMessage.length,
									}
								)

								await messageMonitor.sendTelegramMessage(
									company._id,
									reportMessage
								)
								console.log(
									`[${new Date().toISOString()}] ‚úÖ –ù–æ—á–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
										company.nameCompany
									}`
								)
							} catch (error) {
								console.error(
									`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:`,
									error
								)
								if (error instanceof Error) {
									console.error(
										`[${new Date().toISOString()}] ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`,
										error.message
									)
								}
							}
						} else {
							console.log(
								`[${new Date().toISOString()}] ‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${
									company.nameCompany
								} –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId`
							)
						}
					} catch (error) {
						console.error(
							`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:`,
							error
						)
						if (error instanceof Error) {
							console.error(
								`[${new Date().toISOString()}] ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`,
								error.message,
								error.stack
							)
						}
					}
				},
				null,
				true, // –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
				'UTC' // –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤–º–µ—Å—Ç–æ Asia/Almaty
			)

			// –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ–Ω
			job.start()

			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–∑—É
			if (shouldRunNow) {
				console.log(
					`[${new Date().toISOString()}] ‚ö°Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
						company.nameCompany
					}`
				)
				job.fireOnTick()
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞
			const nextRun = job.nextDate()
			console.log(`[${new Date().toISOString()}] ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:`, {
				nextRun: nextRun?.toString(),
				cronExpression,
				companyName: company.nameCompany,
				shouldRunNow,
			})

			return job
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–æ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
					company.nameCompany
				}:`,
				error
			)
			return null
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
	const initCrons = async () => {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏
			const companies = await CompanySettings.find({
				whatsappAuthorized: true,
				phoneNumber: { $exists: true, $ne: null },
				nameCompany: { $exists: true, $ne: null },
				working_hours_start: { $exists: true, $ne: null },
				working_hours_end: { $exists: true, $ne: null },
			})

			if (companies.length === 0) {
				console.log(
					`[${new Date().toISOString()}] ‚ÑπÔ∏è –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏, –Ω–æ—á–Ω–æ–π –æ—Ç—á–µ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`
				)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∫—Ä–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
			for (const company of companies) {
				const job = await createCompanyCron(company)
				if (!job) {
					console.log(
						`[${new Date().toISOString()}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–æ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
							company.nameCompany
						}`
					)
				}
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–Ω–æ–≤:`,
				error
			)
		}
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–æ–Ω–æ–≤
	initCrons()

	return {
		stop: () => {
			// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∫—Ä–æ–Ω–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		},
	}
}
