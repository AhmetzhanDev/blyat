//telegramClient.ts
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { Api } from 'telegram/tl';
import bigInt from 'big-integer';
import dotenv from 'dotenv';
import * as readline from 'readline';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { CompanySettings } from '../models/CompanySettings';

dotenv.config();

const question = (query: string): Promise<string> => {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.question(query, (answer: string) => {
      rl.close();
      resolve(answer);
    });
  });
};

export class TelegramService {
  private static instance: TelegramService;
  private client: TelegramClient | null = null;
  private stringSession: StringSession;
  private phoneCode: string | null = null;
  private phone: string;
  private sessionFile = path.join(__dirname, 'telegram_session.txt');
  private codePromise: Promise<string> | null = null;
  private codeResolve: ((code: string) => void) | null = null;

  private constructor() {
    this.phone = process.env.TELEGRAM_PHONE || '';
    this.stringSession = new StringSession('');
    this.loadSession();
  }

  private loadSession() {
    try {
      if (fs.existsSync(this.sessionFile)) {
        const sessionString = fs.readFileSync(this.sessionFile, 'utf8');
        this.stringSession = new StringSession(sessionString);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  private saveSession() {
    try {
      fs.writeFileSync(this.sessionFile, this.stringSession.save());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  public static getInstance(): TelegramService {
    if (!TelegramService.instance) {
      TelegramService.instance = new TelegramService();
    }
    return TelegramService.instance;
  }

  public setVerificationCode(code: string): void {
    if (this.codeResolve) {
      this.codeResolve(code);
      this.codeResolve = null;
      this.codePromise = null;
    }
  }

  private waitForVerificationCode(): Promise<string> {
    if (!this.codePromise) {
      this.codePromise = new Promise((resolve) => {
        this.codeResolve = resolve;
      });
    }
    console.log("BOOOM")
    return this.codePromise;
  }

  public async initialize(): Promise<void> {
    if (!this.client) {
      try {
        this.client = new TelegramClient(
          this.stringSession,
          Number(process.env.TELEGRAM_API_ID),
          process.env.TELEGRAM_API_HASH!,
          { connectionRetries: 5 }
        );

        await this.client.start({
          phoneNumber: this.phone,
          phoneCode: async () => {
            console.log('\n=== –û–ñ–ò–î–ê–ù–ò–ï –ö–û–î–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø TELEGRAM ===');
            console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä WhatsApp –∞–¥–º–∏–Ω–∞');
            console.log(`–ù–æ–º–µ—Ä WhatsApp –∞–¥–º–∏–Ω–∞: ${this.phone}`);
            const code = await this.waitForVerificationCode();
            console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
            console.log('========================\n');
            return code;
          },
          onError: (err) => {
            if (err.message.includes('FloodWaitError')) {
              const matches = err.message.match(/\d+/);
              const waitSeconds = matches ? parseInt(matches[0]) : 0;
              const waitMinutes = Math.ceil(waitSeconds / 60);
              const waitHours = Math.ceil(waitSeconds / 3600);
              console.error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å:\n${waitSeconds} —Å–µ–∫—É–Ω–¥\n${waitMinutes} –º–∏–Ω—É—Ç\n${waitHours} —á–∞—Å–æ–≤`);
            }
            console.error('–û—à–∏–±–∫–∞ Telegram:', err);
          },
        });

        this.saveSession();
      } catch (error: any) {
        if (error.message.includes('FloodWaitError')) {
          const matches = error.message.match(/\d+/);
          const waitSeconds = matches ? parseInt(matches[0]) : 0;
          const waitMinutes = Math.ceil(waitSeconds / 60);
          const waitHours = Math.ceil(waitSeconds / 3600);
          throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ:\n${waitSeconds} —Å–µ–∫—É–Ω–¥\n${waitMinutes} –º–∏–Ω—É—Ç\n${waitHours} —á–∞—Å–æ–≤`);
        }
        throw error;
      }
    }
  }

  public setPhoneCode(code: string): void {
    this.phoneCode = code;
  }

  public async createGroupsForCompanies(companies: any[]): Promise<void> {
    if (!this.client) {
      throw new Error('Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    for (const comp of companies) {
      try {
        if (!comp.telegramGroupId) {
          console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${comp.nameCompany}...`);

          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
          const me = await this.client.getMe();
          if (!me) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
          }

          // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å —Å–æ–±–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          const result = await this.client.invoke(new Api.messages.CreateChat({
            users: [me.id],
            title: comp.nameCompany
          }));

          console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Telegram:', JSON.stringify(result, null, 2));

          if (!('updates' in result)) {
            throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ updates');
          }

          const updates = (result.updates as any).updates;

          const chatUpdate = updates.find((update: any) =>
            update.className === 'UpdateChatParticipants' &&
            update.participants &&
            'chatId' in update.participants
          );

          if (!chatUpdate) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ');
          }

          comp.telegramGroupId = chatUpdate.participants.chatId.toString();
          console.log(`[${new Date().toISOString()}] üîç –ü–æ–ª—É—á–µ–Ω ID –≥—Ä—É–ø–ø—ã: ${comp.telegramGroupId}`);

          try {
            // Generate invite link first
            console.log(`[${new Date().toISOString()}] üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã...`);
            const inviteLink = await this.client.invoke(new Api.messages.ExportChatInvite({
              peer: new Api.InputPeerChat({ chatId: bigInt(comp.telegramGroupId) })
            }));

            if (!inviteLink || !('link' in inviteLink)) {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
            }

            comp.telegramInviteLink = inviteLink.link;
            console.log(`[${new Date().toISOString()}] ‚úÖ –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞: ${comp.telegramInviteLink}`);

            const botUsername = process.env.TELEGRAM_BOT_USERNAME;
            if (!botUsername) {
              throw new Error('Username –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
            }

            console.log(`[${new Date().toISOString()}] üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ${botUsername} –≤ –≥—Ä—É–ø–ø—É...`);

            const botInfo = await this.client.invoke(new Api.contacts.ResolveUsername({
              username: botUsername.replace('@', '')
            }));

            if (!botInfo || !('users' in botInfo) || botInfo.users.length === 0) {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ');
            }

            const botUser = botInfo.users[0];
            console.log(`[${new Date().toISOString()}] üîç ID –±–æ—Ç–∞: ${botUser.id}`);

            // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
            await this.client.invoke(new Api.messages.AddChatUser({
              chatId: bigInt(comp.telegramGroupId),
              userId: botUser.id,
              fwdLimit: 0
            }));

            console.log(`[${new Date().toISOString()}] ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É`);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            await this.client.invoke(new Api.messages.EditChatAdmin({
              chatId: bigInt(comp.telegramGroupId),
              userId: botUser.id,
              isAdmin: true
            }));

            console.log(`[${new Date().toISOString()}] ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É ${comp.nameCompany}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
              const botToken = process.env.TELEGRAM_BOT_TOKEN;
              if (!botToken) {
                throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
              }

              console.log(`[${new Date().toISOString()}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...`);
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º ID –≥—Ä—É–ø–ø—ã –¥–ª—è API –±–æ—Ç–∞
              const botGroupId = `-${comp.telegramGroupId}`;
              console.log(`[${new Date().toISOString()}] üîç ID –≥—Ä—É–ø–ø—ã –¥–ª—è API –±–æ—Ç–∞: ${botGroupId}`);
              
              const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  chat_id: botGroupId,
                  text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç Sales-Track"
                })
              });

              const result = await response.json();
              console.log(`[${new Date().toISOString()}] üìù –û—Ç–≤–µ—Ç –æ—Ç Telegram API:`, JSON.stringify(result, null, 2));

              if (!result.ok) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${result.description}`);
              } else {
                console.log(`[${new Date().toISOString()}] ‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
              }
            } catch (error) {
              console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
            }

            // Save to database with retry
            let retryCount = 0;
            const maxRetries = 3;
            
            while (retryCount < maxRetries) {
              try {
                console.log(`[${new Date().toISOString()}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
                await CompanySettings.updateOne(
                  { '_id': comp._id },
                  {
                    $set: {
                      'telegramGroupId': comp.telegramGroupId,
                      'telegramInviteLink': comp.telegramInviteLink
                    }
                  }
                );
                console.log(`[${new Date().toISOString()}] ‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
                break;
              } catch (dbError) {
                retryCount++;
                console.error(`[${new Date().toISOString()}] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å:`, dbError);
                if (retryCount === maxRetries) {
                  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
                }
                // Wait before retry
                await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));
              }
            }

            console.log(`[${new Date().toISOString()}] ‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${comp.nameCompany}`);
          } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${comp.nameCompany}:`, error);
            // Clean up if needed
            if (comp.telegramGroupId && !comp.telegramInviteLink) {
              console.log(`[${new Date().toISOString()}] üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...`);
              try {
                await CompanySettings.updateOne(
                  { '_id': comp._id },
                  { $unset: { 'telegramGroupId': 1, 'telegramInviteLink': 1 } }
                );
              } catch (cleanupError) {
                console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:`, cleanupError);
              }
            }
            throw error;
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${comp.nameCompany}:`, error);
      }
    }
  }

  public async makeBotAdmin(groupId: string): Promise<void> {
    try {
      if (!this.client) {
        throw new Error('Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const botUsername = process.env.TELEGRAM_BOT_USERNAME;
      if (!botUsername) {
        throw new Error('Username –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.client.invoke(new Api.contacts.ResolveUsername({
        username: botUsername.replace('@', '')
      }));

      if (!botInfo || !('users' in botInfo) || botInfo.users.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ');
      }

      const botUser = botInfo.users[0];

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–µ
      await this.client.invoke(new Api.messages.EditChatAdmin({
        chatId: bigInt(groupId),
        userId: botUser.id,
        isAdmin: true
      }));

      console.log(`[${new Date().toISOString()}] ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã ${groupId}`);
    } catch (error) {
      console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:`, error);
      throw error;
    }
  }

  public async sendMessage(groupId: string, message: string): Promise<void> {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –≥—Ä—É–ø–ø—ã –Ω–µ –ø—É—Å—Ç–æ–π
      if (!groupId) {
        throw new Error('ID –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      console.log(`[${new Date().toISOString()}] üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: ${groupId}`);

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: groupId,
          text: message,
          parse_mode: 'HTML'
        })
      });

      const result = await response.json();
      
      if (!result.ok) {
        console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:`, result.description);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: ${result.description}`);
      }

      console.log(`[${new Date().toISOString()}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É ${groupId}`);
    } catch (error: any) {
      console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
      throw error;
    }
  }

  public async disconnect(): Promise<void> {
    if (this.client) {
      await this.client.disconnect();
    }
  }

  public async isConnected(): Promise<boolean> {
    try {
      if (!this.client) {
        console.log('[Telegram] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return false;
      }

      const isAuthorized = await this.client.isUserAuthorized();
      console.log(`[Telegram] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${isAuthorized}`);
      
      if (!isAuthorized) {
        console.log('[Telegram] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      await this.client.getMe();
      console.log('[Telegram] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      return true;
    } catch (error) {
      console.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return false;
    }
  }
}