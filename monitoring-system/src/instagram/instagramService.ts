import axios from "axios"
import { firstValueFrom } from 'rxjs';
import FormData from 'form-data';
import dotenv from "dotenv"
import { TelegramService } from "../telegram/telegramClient";
import { MessageMonitor } from "../whatsapp/messageMonitor";
import { CompanySettings } from "../models/CompanySettings";
import { InstagramChat } from "../models/InstagramChat";
import { InstagramMessage } from "../models/InstagramMessage";

dotenv.config()




export class InstagramService {
    private static instance: MessageMonitor;
    private activeTimers: Map<string, NodeJS.Timeout>;
    private telegramService: TelegramService;
    
    private readonly appId = process.env.IG_APP_ID;
    private readonly appSecret = process.env.IG_APP_SECRET;
    private readonly redirectUri = process.env.IG_REDIRECT_URI;
    //private readonly apiUrl = 'https://graph.facebook.com/v18.0';
    private readonly apiUrl = 'https://graph.instagram.com/v22.0';
    // private readonly apiUrl = 'https://graph.instagram.com';
    private readonly apiUrl_TokenLive = 'https://api.instagram.com/oauth/access_token';

    constructor() {
        // private readonly http: HttpService,
        // private readonly userService: UserService
        this.activeTimers = new Map();
        this.telegramService = TelegramService.getInstance();
    }

    async exchangeCodeForToken(code: string) {
        // –ú–µ–Ω—è–µ–º code –Ω–∞ access_token
        try {

            const { access_token, user_id } = await this.sendFormData(code);

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            console.log("Trying get bussines account", access_token);
            const userUrl = `${this.apiUrl}/me?access_token=${access_token}`;
            // const userUrl = `${this.apiUrl}/me?fields=id,username,media_count&access_token=${access_token}`;
            console.log(userUrl)
            const userResponse = await axios.get(userUrl);
            console.log(userResponse?.data)
            if (!userResponse || !userResponse.data) {
                throw new Error('No connected Instagram business accounts');
            }

            const page = userResponse.data;
            const pageAccessToken = page.access_token;
            const pageId = page.id;

            // –ü–æ–ª—É—á–∞–µ–º Instagram Business ID
            console.log(user_id, access_token)
            const igUrl = `${this.apiUrl}/${user_id}?fields=instagram_business_account&access_token=${access_token}`;
            const igResponse = await axios.get(igUrl);
            if (!igResponse || !igResponse.data || !igResponse.data.instagram_business_account) {
                throw new Error('Failed to retrieve Instagram Business Account ID');
            }

            const instagramAccountId = igResponse.data.instagram_business_account.id;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ MongoDB
            // await this.userService.saveUser(user_id, instagramAccountId, access_token);
            // TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏

            return { message: 'User authenticated and saved successfully' };
        } catch (error: any) {
            console.log(error.response.data)
            console.error('Instagram authentication error:', error.message);
            throw new Error(`Authentication failed: ${error.message}`);
        }

    }

    async sendFormData(code: string) {
        // Create FormData instance and append the necessary fields
        const form = new FormData();
        form.append('client_id', process.env.IG_APP_ID || "");
        form.append('client_secret', process.env.IG_APP_SECRET || "");
        form.append('grant_type', 'authorization_code');
        form.append('redirect_uri', process.env.IG_REDIRECT_URI || "");
        form.append('code', code);

        // Send POST request with form-data
        try {
            const response = await axios.post(this.apiUrl_TokenLive, form, {
                    headers: form.getHeaders(), // Include correct headers for FormData
                })

            // The response is JSON and will be automatically parsed
            console.log(response.data); // Log or return the JSON response
            return response.data;
        } catch (error: any) {
            console.log(process.env.IG_REDIRECT_URI);
            console.log(process.env.IG_APP_SECRET);
            console.log(process.env.IG_APP_ID);
            console.log(code);


            console.error('Error during Instagram OAuth exchange:', error.response?.data || error.message);
            throw new Error('Failed to exchange code for token');
        }
    }

    async handleMessage(body: any) {
        console.log("Got Webhook");
        if (body.entry) {
            body.entry.forEach((entry: any) => {
                entry.messaging?.forEach(async (event: any) => {
                    console.log(`New message from ${event.sender.id}: ${event.message.text}`);

                    try {
                        const timestamp = new Date().toISOString();
                        console.log(`[${timestamp}] üì± –ü–æ–ª—É—á–µ–Ω–æ Instagram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${event.sender.id}`);
                        console.log(`[${timestamp}] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${event.message.text}"`);
                        
                        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        const company = await CompanySettings.findOne({ instagramUserId: event.recipient.id });
                        if (!company) {
                          console.log(`[${timestamp}] ‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID: ${event.recipient.id}`);
                          return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                        }
                        console.log(`[${timestamp}] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è:`, company);
                    
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        let chat = await InstagramChat.findOne({ chatId: event.sender.id });
                    
                        console.log(chat)
                        if (!chat) {
                          console.log(`[${timestamp}] ‚ùå –ß–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${event.sender.id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`);

                          const url = `https://graph.instagram.com/v22.0/${event.message.is_echo ? event.recipient.id : event.sender.id}?fields=name,username&access_token=${company.accessToken}`

                          const userInfo = await axios.get(url)
                    
                          // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                          try {
                            chat = new InstagramChat({
                              companyId: company._id,
                              chatId: event.sender.id,
                              userName: userInfo.data.username,
                              name: userInfo.data.name
                            });
                            await chat.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                            console.log(`[${timestamp}] üìù –ù–æ–≤—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è: ${event.sender.id}`);
                          } catch (error) {
                            console.error(`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:`, error);
                            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç
                          }
                        } else {
                          console.log(`[${timestamp}] ‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω:`, chat);
                        }
                    
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        const whatsappMessage = new InstagramMessage({
                          isEcho: event.message.is_echo || false,
                          text: event.message.text,
                          instagramChatId: chat._id,
                          isClosed: false  // –°–¥–µ–ª–∫–∞ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
                        });
                    
                        try {
                          await whatsappMessage.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                          console.log(`[${timestamp}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:`, whatsappMessage);
                        } catch (error) {
                          console.error(`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
                          return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        if (event.message.is_echo) {
                            console.log(`[${timestamp}] üë§ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);

                            if (this.activeTimers.has(event.recipient.id)) {
                                console.log(`[${timestamp}] üõë –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${event.recipient.id}`);
                                clearTimeout(this.activeTimers.get(event.recipient.id));
                                this.activeTimers.delete(event.recipient.id);
                                console.log(`[${timestamp}] ‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`);
                            }
                            return;
                        }
                    
                        // –õ–æ–≥–∏–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è
                        if (this.activeTimers.has(event.sender.id)) {
                          console.log(`[${timestamp}] üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${event.sender.id}`);
                          clearTimeout(this.activeTimers.get(event.sender.id));
                        }
                    
                        // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
                        if (this.activeTimers.has(event.sender.id)) {
                          console.log(`[${timestamp}] üõë –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${event.sender.id}`);
                          clearTimeout(this.activeTimers.get(event.sender.id));
                          this.activeTimers.delete(event.sender.id);
                          console.log(`[${timestamp}] ‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`);
                        }
                    
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                        const timer = setTimeout(async () => {
                          const currentTimestamp = new Date().toISOString();
                          console.log(`[${currentTimestamp}] ‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è ${event.recipient.id} (—á–∞—Ç ${chat.userName})`);
                          
                          if (company.telegramGroupId) {
                            try {
                              const reminderMessage = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è\n\n–í Instagram-—á–∞—Ç–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${company.managerResponse} –º–∏–Ω—É—Ç!\n\n–ß–∞—Ç: @${chat.userName} (${chat.name})`;
                              
                              if (!this.telegramService) {
                                throw new Error('Telegram —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                              }
                              
                              const isConnected = await this.telegramService.isConnected();
                              if (!isConnected) {
                                await this.telegramService.initialize();
                              }
                              
                              await this.telegramService.sendMessage(`-${company.telegramGroupId}`, reminderMessage);
                              console.log(`[${currentTimestamp}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
                            } catch (error) {
                              console.error(`[${currentTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error);
                            }
                          }
                        }, (company?.managerResponse || 5) * 60 * 1000);
                    
                        this.activeTimers.set(event.recipient.id, timer);
                        console.log(`[${timestamp}] ‚è≥ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ ${company.managerResponse} –º–∏–Ω—É—Ç –¥–ª—è ${event.recipient.id} (—á–∞—Ç ${chat.userName})`);
                      } catch (error) {
                        console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
                      }
                });
            });
        }
        return { status: 'success' };
    }

    async getUserMessages(instagramAccountId: string, accessToken: string, limit: number) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            const url = `${this.apiUrl}${instagramAccountId}/messages`;

            const response = await axios.get(url, {
                    params: {
                        access_token: accessToken,
                        limit: limit,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    },
                })

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            return response.data.data;
        } catch (error: any) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –∫–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            console.error('Error fetching user messages:', error.response ? error.response.data : error.message);
            throw new Error('Failed to fetch user messages');
        }
    }
}