import { WhatsappChat } from '../models/WhatsappChat'
import { WhatsappMessage } from '../models/WhatsappMessage'
import { CompanySettings, ICompanySettings } from '../models/CompanySettings' // –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç ICompanySettings
import { MessageMonitor } from './messageMonitor'
import { CronJob } from 'cron'
import { TelegramService } from '../telegram/TelegramService' // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ TelegramService –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
import { Types } from 'mongoose' // –í–∞–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Types.ObjectId

// –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
export const initDailyReportCron = (messageMonitor: MessageMonitor) => {
    console.log(
        `[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`
    )

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    const testCron = '*/1 * * * *'
    // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –≤ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–∏–ª–∏ '0 3 * * *' –µ—Å–ª–∏ 3 —É—Ç—Ä–∞)
    const realCron = '0 3 * * *' // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ '0 21 * * *' –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ 21:00

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    const job = new CronJob(realCron, async () => {
        console.log(
            `[${new Date().toISOString()}] üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞`
        )
        try {
            // –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, —á—Ç–æ–±—ã TypeScript –∑–Ω–∞–ª, —á—Ç–æ _id –±—É–¥–µ—Ç Types.ObjectId
            const companies: (ICompanySettings & { _id: Types.ObjectId })[] = await CompanySettings.find({
                phoneNumber: { $exists: true, $ne: null },
                nameCompany: { $exists: true, $ne: null },
            });

            console.log(
                `[${new Date().toISOString()}] üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞: ${
                    companies.length
                }`
            )

            for (const company of companies) {
                console.log(
                    `[${new Date().toISOString()}] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: ${
                        company.nameCompany
                    }`
                )
                console.log(
                    `[${new Date().toISOString()}] üîç Telegram Group ID: ${
                        company.telegramGroupId
                    }`
                )

                if (!company.telegramGroupId) {
                    console.log(
                        `[${new Date().toISOString()}] ‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${
                            company.nameCompany
                        } –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId`
                    )
                    continue
                }

                try {
                    // generateDailyReport –¥–æ–ª–∂–µ–Ω –æ–∂–∏–¥–∞—Ç—å Types.ObjectId –¥–ª—è company._id
                    const report = await messageMonitor.generateDailyReport(company._id);
                    
                    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ company._id –∫ Types.ObjectId
                    // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ company._id —è–≤–ª—è–µ—Ç—Å—è ObjectId –∏–∑ MongoDB
                    await messageMonitor.sendTelegramMessage(company._id as Types.ObjectId, report); 
                    
                    console.log(
                        `[${new Date().toISOString()}] ‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
                            company.nameCompany
                        }`
                    )
                } catch (error) {
                    console.error(
                        `[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏ ${
                            company.nameCompany
                        }:`,
                        error
                    )
                }
            }
        } catch (error) {
            console.error(
                `[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:`,
                error
            )
        }
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ–Ω
    job.start()
    console.log(
        `[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω`
    )
    console.log(
        `[${new Date().toISOString()}] ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å`
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
    if (job) {
        console.log(
            `[${new Date().toISOString()}] ‚úÖ –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
        )
        console.log(
            `[${new Date().toISOString()}] ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${job
                .nextDate()
                .toLocaleString()}`
        )
    } else {
        console.error(
            `[${new Date().toISOString()}] ‚ùå –ö—Ä–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!`
        )
    }
}