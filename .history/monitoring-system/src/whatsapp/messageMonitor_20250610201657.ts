//
import { Client, Message } from 'whatsapp-web.js'
import { UserModel } from '../models/User'
import { CompanySettings } from '../models/CompanySettings'
import { TelegramService } from '../telegram/TelegramService'
import { WhatsappChat } from '../models/WhatsappChat'
import { WhatsappMessage } from '../models/WhatsappMessage'
import { Types } from 'mongoose'

export class MessageMonitor {
	private static instance: MessageMonitor
	private activeTimers: Map<string, NodeJS.Timeout>
	private telegramService: TelegramService

	private constructor() {
		console.log(`[${new Date().toISOString()}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageMonitor`)
		this.activeTimers = new Map()
		this.telegramService = TelegramService.getInstance()
		console.log(
			`[${new Date().toISOString()}] ‚úÖ MessageMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`
		)
	}

	public static getInstance(): MessageMonitor {
		if (!MessageMonitor.instance) {
			console.log(
				`[${new Date().toISOString()}] üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MessageMonitor`
			)
			MessageMonitor.instance = new MessageMonitor()
		} else {
			console.log(
				`[${new Date().toISOString()}] ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MessageMonitor`
			)
		}
		return MessageMonitor.instance
	}

	public async sendTelegramMessage(companyId: Types.ObjectId, message: string) {
		if (!this.telegramService) {
			throw new Error('Telegram —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
		}

		const isConnected = await this.telegramService.isConnected()
		if (!isConnected) {
			await this.telegramService.initialize()
		}

		const company = await CompanySettings.findById(companyId)
		if (!company) {
			console.log(`–ö–û–ú–ü–ê–ù–ò–Ø ${companyId} –ù–ï –ù–ê–ô–î–ï–ù–ê `)
			return
		}

		if (!company.telegramGroupId) {
			console.log(`–£ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId} –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId`)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç telegramGroupId
		let groupId = company.telegramGroupId.toString()
		if (!groupId.startsWith('-')) {
			groupId = `-${groupId}`
		}

		console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É —Å ID: ${groupId}`)

		await this.telegramService.sendMessage(groupId, message)
		console.log(
			`[${new Date().toISOString()}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`
		)
	}

	// Test method to send message to specific group
	public async sendTestMessage() {
		const groupId = '-1002820304180'
		const message = 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SalesTrack\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.'
		
		try {
			await this.telegramService.sendMessage(groupId, message)
			console.log(`[${new Date().toISOString()}] ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É ${groupId}`)
		} catch (error) {
			console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error)
		}
	}

	private isWithinWorkingHours(company: any): boolean {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null, undefined –∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
		if (
			!company.working_hours_start ||
			!company.working_hours_end ||
			company.working_hours_start.trim() === '' ||
			company.working_hours_end.trim() === ''
		) {
			console.log(
				`[${new Date().toISOString()}] ‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ`
			)
			return true // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞
		}

		const now = new Date()
		const utcHours = now.getUTCHours()
		const utcMinutes = now.getUTCMinutes()
		const currentTimeInMinutes = utcHours * 60 + utcMinutes

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤ –º–∏–Ω—É—Ç—ã
		const [startHours, startMinutes] = company.working_hours_start
			.split(':')
			.map(Number)
		const [endHours, endMinutes] = company.working_hours_end
			.split(':')
			.map(Number)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
		if (
			isNaN(startHours) ||
			isNaN(startMinutes) ||
			isNaN(endHours) ||
			isNaN(endMinutes)
		) {
			console.log(
				`[${new Date().toISOString()}] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ - —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ`
			)
			return true
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC (–≤—ã—á–∏—Ç–∞–µ–º 5 —á–∞—Å–æ–≤ –¥–ª—è –ê–ª–º–∞—Ç—ã)
		const startTimeInMinutes = (startHours - 5) * 60 + startMinutes
		const endTimeInMinutes = (endHours - 5) * 60 + endMinutes

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
		if (startTimeInMinutes <= endTimeInMinutes) {
			return (
				currentTimeInMinutes >= startTimeInMinutes &&
				currentTimeInMinutes <= endTimeInMinutes
			)
		} else {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
			return (
				currentTimeInMinutes >= startTimeInMinutes ||
				currentTimeInMinutes <= endTimeInMinutes
			)
		}
	}

	public async handleMessage(message: Message): Promise<void> {
		try {
			const timestamp = new Date().toISOString()
			console.log(`[${timestamp}] üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${message.from}`)
			console.log(`[${timestamp}] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${message.body}"`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			if (message.fromMe) {
				console.log(`[${timestamp}] üë§ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
				return
			}

			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ID —á–∞—Ç–∞)
			if (message.from.endsWith('@g.us')) {
				console.log(
					`[${timestamp}] üë• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: ${message.from}`
				)
				return
			}

			if (message.from === 'status@broadcast') {
				console.log(`[${timestamp}] üì± –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
				return
			}

			const clientCleanPhoneNumber = message.from
				.replace('@c.us', '')
				.replace('+', '')
				.replace(/\D/g, '')
			const cleanPhoneNumber = message.to
				.replace('@c.us', '')
				.replace('+', '')
				.replace(/\D/g, '')
			console.log(`[${timestamp}] üîç –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ: ${cleanPhoneNumber}`)

			// –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
			const company = await CompanySettings.findOne({
				phoneNumber: cleanPhoneNumber,
			})
			if (!company) {
				console.log(
					`[${timestamp}] ‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${cleanPhoneNumber}`
				)
				return
			}
			console.log(`[${timestamp}] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è:`, company)

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			let chat = await WhatsappChat.findOne({ chatId: clientCleanPhoneNumber })

			console.log(chat)
			if (!chat) {
				console.log(
					`[${timestamp}] ‚ùå –ß–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${clientCleanPhoneNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`
				)

				try {
					chat = new WhatsappChat({
						companyId: company._id,
						chatId: clientCleanPhoneNumber,
					})
					await chat.save()
					console.log(
						`[${timestamp}] üìù –ù–æ–≤—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è: ${clientCleanPhoneNumber}`
					)
				} catch (error) {
					console.error(
						`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:`,
						error
					)
					return
				}
			} else {
				console.log(`[${timestamp}] ‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω:`, chat)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			const whatsappMessage = new WhatsappMessage({
				isEcho: message.fromMe,
				text: message.body,
				whatsappChatId: chat._id,
				companyId: company._id,
				isClosed: false,
			})

			try {
				await whatsappMessage.save()
				console.log(`[${timestamp}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:`, whatsappMessage)
			} catch (error) {
				console.error(
					`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
					error
				)
				return
			}

			// –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
			const isWorkingHours = this.isWithinWorkingHours(company)
			console.log(
				`[${timestamp}] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${
					isWorkingHours ? '—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' : '–≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
				}`
			)

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
			if (isWorkingHours) {
				// –õ–æ–≥–∏–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è
				if (this.activeTimers.has(message.to)) {
					console.log(
						`[${timestamp}] üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${message.to}`
					)
					clearTimeout(this.activeTimers.get(message.to))
				}

				// –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
				if (this.activeTimers.has(message.from)) {
					console.log(`[${timestamp}] üõë –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${message.from}`)
					clearTimeout(this.activeTimers.get(message.from))
					this.activeTimers.delete(message.from)
					console.log(`[${timestamp}] ‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`)
				}

				// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
				const timer = setTimeout(async () => {
					const currentTimestamp = new Date().toISOString()
					console.log(
						`[${currentTimestamp}] ‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è ${message.to} (—á–∞—Ç ${clientCleanPhoneNumber})`
					)

					if (company.telegramGroupId) {
						try {
							console.log(`[${currentTimestamp}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:`, {
								companyId: company._id,
								telegramGroupId: company.telegramGroupId,
								managerResponse: company.managerResponse,
								clientPhone: clientCleanPhoneNumber
							});

							const reminderMessage = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è\n\n–í WhatsApp-—á–∞—Ç–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${company.managerResponse} –º–∏–Ω—É—Ç!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: https://wa.me/${clientCleanPhoneNumber}`

							if (!this.telegramService) {
								console.error(`[${currentTimestamp}] ‚ùå Telegram —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
								throw new Error('Telegram —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
							}

							const isConnected = await this.telegramService.isConnected()
							console.log(`[${currentTimestamp}] üîç –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram: ${isConnected}`);
							
							if (!isConnected) {
								console.log(`[${currentTimestamp}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞...`);
								await this.telegramService.initialize()
							}

							// –ü–µ—Ä–µ–¥–∞–µ–º ID –≥—Ä—É–ø–ø—ã –±–µ–∑ –º–∏–Ω—É—Å–∞, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ TelegramService
							const groupId = company.telegramGroupId.toString();
							console.log(`[${currentTimestamp}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É ${groupId}`);
							
							await this.telegramService.sendMessage(
								groupId,
								reminderMessage
							)
							console.log(
								`[${currentTimestamp}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`
							)
						} catch (error) {
							console.error(
								`[${currentTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`,
								error
							)
						}
					} else {
						console.log(`[${currentTimestamp}] ‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${company._id} –Ω–µ —É–∫–∞–∑–∞–Ω telegramGroupId`);
					}
				}, (company?.managerResponse || 5) * 60 * 1000)

				this.activeTimers.set(message.from, timer)
				console.log(
					`[${timestamp}] ‚è≥ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ ${company.managerResponse} –º–∏–Ω—É—Ç –¥–ª—è ${message.to} (—á–∞—Ç ${message.from})`
				)
			} else {
				console.log(
					`[${timestamp}] ‚ÑπÔ∏è –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω`
				)
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
				error
			)
		}
	}

	public async handleAdminMessage(message: Message): Promise<void> {
		try {
			const timestamp = new Date().toISOString()
			console.log(`[${timestamp}] üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${message.from}`)
			console.log(`[${timestamp}] üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "${message.body}"`)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			if (message.fromMe) {
				console.log(`[${timestamp}] üë§ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Telegram
			const isTelegramCode = message.body.match(/^\d{5}$/)
			if (isTelegramCode) {
				console.log(
					`[${timestamp}] üîë –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Telegram: ${message.body}`
				)
				console.log(`[${timestamp}] üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ Telegram –∫–æ–¥...`)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram —Å–µ—Ä–≤–∏—Å–∞
				const isConnected = await this.telegramService.isConnected()
				console.log(
					`[${timestamp}] üîë Telegram —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${isConnected}`
				)

				if (!isConnected) {
					console.log(
						`[${timestamp}] üîë –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram —Å–µ—Ä–≤–∏—Å...`
					)
					await this.telegramService.initialize()
				}

				console.log(`[${timestamp}] üîë –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–¥ –≤ Telegram —Å–µ—Ä–≤–∏—Å...`)
				this.telegramService.setVerificationCode(message.body)
				console.log(`[${timestamp}] üîë –ö–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –≤ Telegram —Å–µ—Ä–≤–∏—Å`)
				return
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
				error
			)
		}
	}

	public async handleOutgoingMessage(message: Message): Promise<void> {
		try {
			const timestamp = new Date().toISOString()
			console.log(`[${timestamp}] üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`)
			console.log(`[${timestamp}] üì§ –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, {
				from: message.from,
				to: message.to,
				body: message.body,
				fromMe: message.fromMe,
				type: message.type,
				isForwarded: message.isForwarded,
				isStatus: message.isStatus,
				isGroupChat: message.to.endsWith('@g.us'),
			})

			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ID —á–∞—Ç–∞)
			if (message.to.endsWith('@g.us')) {
				console.log(
					`[${timestamp}] üë• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: ${message.to}`
				)
				return
			}

			// –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
			const cleanPhoneNumber = message.from.replace(/\D/g, '')
			const clientCleanPhoneNumber = message.to.replace(/\D/g, '')
			console.log(`[${timestamp}] üîç –û—á–∏—â–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:`, {
				cleanPhoneNumber,
				clientCleanPhoneNumber,
			})

			// –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
			console.log(
				`[${timestamp}] üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É: ${cleanPhoneNumber}`
			)
			const company = await CompanySettings.findOne({
				phoneNumber: cleanPhoneNumber,
			})

			if (!company) {
				console.log(
					`[${timestamp}] ‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${cleanPhoneNumber}`
				)
				console.log(
					`[${timestamp}] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:`,
					await CompanySettings.find({}, 'phoneNumber')
				)
				return
			}
			console.log(`[${timestamp}] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è:`, {
				id: company._id,
				name: company.nameCompany,
				phoneNumber: company.phoneNumber,
			})

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			console.log(
				`[${timestamp}] üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${clientCleanPhoneNumber}`
			)
			let chat = await WhatsappChat.findOne({ chatId: clientCleanPhoneNumber })
			console.log(
				`[${timestamp}] üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞:`,
				chat
					? {
							id: chat._id,
							chatId: chat.chatId,
							companyId: chat.companyId,
					  }
					: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
			)

			if (!chat) {
				console.log(
					`[${timestamp}] ‚ùå –ß–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${clientCleanPhoneNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`
				)
				try {
					chat = new WhatsappChat({
						companyId: company._id,
						chatId: clientCleanPhoneNumber,
					})
					await chat.save()
					console.log(`[${timestamp}] üìù –ù–æ–≤—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:`, {
						id: chat._id,
						chatId: chat.chatId,
						companyId: chat.companyId,
					})
				} catch (error) {
					console.error(
						`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:`,
						error
					)
					return
				}
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			console.log(`[${timestamp}] üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`)
			const whatsappMessage = new WhatsappMessage({
				isEcho: true,
				text: message.body || '[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]',
				whatsappChatId: chat._id,
				companyId: company._id,
				isClosed: false,
			})

			try {
				await whatsappMessage.save()
				console.log(`[${timestamp}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:`, {
					id: whatsappMessage._id,
					text: whatsappMessage.text,
					chatId: whatsappMessage.whatsappChatId,
					companyId: whatsappMessage.companyId,
				})
			} catch (error) {
				console.error(
					`[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
					error
				)
				return
			}

			// –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
			const isWorkingHours = this.isWithinWorkingHours(company)
			console.log(
				`[${timestamp}] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${
					isWorkingHours ? '—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' : '–≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
				}`
			)

			// –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
			if (isWorkingHours && this.activeTimers.has(message.to)) {
				console.log(`[${timestamp}] üõë –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è ${message.to}`)
				clearTimeout(this.activeTimers.get(message.to))
				this.activeTimers.delete(message.to)
				console.log(`[${timestamp}] ‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`)
			}
		} catch (error) {
			console.error(
				`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
				error
			)
		}
	}

	public async generateDailyReport(companyId: Types.ObjectId): Promise<string> {
		console.log(
			`[${new Date().toISOString()}] üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`
		)

		const company = await CompanySettings.findById(companyId)
		if (!company) {
			throw new Error(`–ö–æ–º–ø–∞–Ω–∏—è —Å ID ${companyId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞: —Å 3:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –¥–æ 3:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
		const now = new Date()
		const reportEnd = new Date(now)
		reportEnd.setHours(3, 0, 0, 0)
		if (now < reportEnd) {
			reportEnd.setDate(reportEnd.getDate() - 1)
		}
		const reportStart = new Date(reportEnd)
		reportStart.setDate(reportStart.getDate() - 1)

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		const chats = await WhatsappChat.find({
			companyId: company._id,
			createdAt: { $gte: reportStart, $lt: reportEnd },
		})

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
		const messages = await WhatsappMessage.find({
			whatsappChatId: { $in: chats.map(chat => chat._id) },
			createdAt: { $gte: reportStart, $lt: reportEnd },
		})

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		const startedChats = chats.length
		const closedChats = chats.filter(chat => chat.isClosed).length

		// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
		const responseTimes: number[] = []
		for (const chat of chats) {
			const chatMessages = messages.filter(m =>
				m.whatsappChatId.equals(chat._id)
			)
			const firstClientMsg = chatMessages.find(m => !m.isEcho)
			const firstManagerMsg = chatMessages.find(
				m =>
					m.isEcho && firstClientMsg && m.createdAt > firstClientMsg.createdAt
			)
			if (firstClientMsg && firstManagerMsg) {
				const responseTime =
					firstManagerMsg.createdAt.getTime() -
					firstClientMsg.createdAt.getTime()
				console.log(
					`[${new Date().toISOString()}] ‚è±Ô∏è –ß–∞—Ç ${
						chat.chatId
					}: firstClientMsg=${firstClientMsg.createdAt.toISOString()}, firstManagerMsg=${firstManagerMsg.createdAt.toISOString()}, responseTime=${responseTime} –º—Å (${Math.round(
						responseTime / 1000
					)} —Å–µ–∫)`
				)
				responseTimes.push(responseTime)
			}
		}

		const avgResponseTime =
			responseTimes.length > 0
				? Math.round(
						responseTimes.reduce((a, b) => a + b, 0) /
							responseTimes.length /
							1000
				  )
				: 0

		// –î–∏–∞–ª–æ–≥–∏ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
		const unansweredChats = chats.filter(chat => {
			const chatMessages = messages.filter(m =>
				m.whatsappChatId.equals(chat._id)
			)
			return chatMessages.length > 0 && !chatMessages.some(m => m.isEcho)
		}).length

		// –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
		const overdueResponses = responseTimes.filter(
			time => time > 2 * 60 * 1000
		).length

		// –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —á–∞—Ç—ã (sendMessage: false)
		const unviewedChats = chats.filter(chat => !chat.sendMessage)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
		const report =
			`üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç SalesTrack</b>\n\n` +
			`üóì <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleDateString()}\n\n` +
			`üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company.nameCompany}\n\n` +
			`<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n` +
			`‚úçÔ∏è <b>–î–∏–∞–ª–æ–≥–æ–≤ –Ω–∞—á–∞—Ç–æ:</b> ${startedChats}\n` +
			`‚úÖ <b>–î–∏–∞–ª–æ–≥–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ:</b> ${closedChats}\n` +
			`‚ö°Ô∏è<b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> ${Math.floor(
				avgResponseTime / 60
			)} –º–∏–Ω. ${avgResponseTime % 60} —Å–µ–∫.\n` +
			`‚ö†Ô∏è <b>–î–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞:</b> ${unansweredChats}\n` +
			`üïì <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª—å—à–µ 2 –º–∏–Ω):</b> ${overdueResponses}\n\n` +
			`üìå <b>–°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n` +
			`${Array.from(
				new Set(unviewedChats.map(chat => `https://wa.me/${chat.chatId}`))
			).join('\n')}`

		console.log(
			`[${new Date().toISOString()}] ‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${
				company.nameCompany
			}`
		)
		return report
	}

	private async handleTelegramVerification(message: string, chatId: string): Promise<void> {
		try {
			const codeMatch = message.match(/\b(\d{6})\b/);
			if (!codeMatch) {
				return;
			}

			const code = Number(codeMatch[1]);
			const store = await CompanySettings.findOne({ verificationCode: code });
			
			if (!store) {
				await this.telegramService.sendMessage(chatId, '–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
				return;
			}

			// –ü–æ–ª—É—á–∞–µ–º invite link –¥–ª—è –≥—Ä—É–ø–ø—ã
			const chat = await this.telegramService.client!.getEntity(chatId);
			const result = await this.telegramService.client!.invoke(new Api.messages.ExportChatInvite({
				peer: chatId,
				title: store.nameCompany || 'Store Group',
				expireDate: 0,
				usageLimit: 0
			}));

			if (result instanceof Api.ChatInviteExported) {
				// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
				store.telegramGroupId = chatId;
				store.telegramInviteLink = result.link;
				store.verificationCode = undefined; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				await store.save();

				await this.telegramService.sendMessage(chatId, `–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É: ${store.nameCompany || store._id}`);
			} else {
				throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å invite link');
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
			await this.telegramService.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
		}
	}
}
